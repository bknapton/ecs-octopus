name: Deploy Octopus Deploy to ECS Fargate

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }} # e.g., us-east-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # e.g., octopus-deploy
  ECS_CLUSTER: octopus-cluster
  ECS_SERVICE: octopus-service
  ECS_TASK_FAMILY: octopus-deploy

jobs:
  deploy:
    runs-on: windows-latest # Required for Windows container build

    steps:
      # Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # Get AWS account ID
      - name: Get AWS Account ID
        id: aws-account
        run: |
          $account_id = aws sts get-caller-identity --query Account --output text
          echo "AWS_ACCOUNT_ID=$account_id" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Build, tag, and push Docker image to ECR
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      # Update task definition with secrets
      - name: Render task definition
        id: render-task
        env:
          AWS_ACCOUNT_ID: ${{ env.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
          RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          OCTOPUS_ADMIN_PASSWORD: ${{ secrets.OCTOPUS_ADMIN_PASSWORD }}
        run: |
          $task_def = Get-Content -Raw -Path task-definition.json
          $task_def = $task_def -replace '\${AWS_ACCOUNT_ID}', $env:AWS_ACCOUNT_ID
          $task_def = $task_def -replace '\${AWS_REGION}', $env:AWS_REGION
          $task_def = $task_def -replace '\${ECR_REPOSITORY}', $env:ECR_REPOSITORY
          $task_def = $task_def -replace '\${RDS_ENDPOINT}', $env:RDS_ENDPOINT
          $task_def = $task_def -replace '\${RDS_USERNAME}', $env:RDS_USERNAME
          $task_def = $task_def -replace '\${RDS_PASSWORD}', $env:RDS_PASSWORD
          $task_def = $task_def -replace '\${OCTOPUS_ADMIN_PASSWORD}', $env:OCTOPUS_ADMIN_PASSWORD
          Set-Content -Path task-definition-updated.json -Value $task_def
          echo "TASK_DEF_PATH=task-definition-updated.json" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Register updated task definition
      - name: Register ECS task definition
        id: register-task
        run: |
          $task_def_response = aws ecs register-task-definition --cli-input-json file://$env:TASK_DEF_PATH
          $revision = ($task_def_response | ConvertFrom-Json).taskDefinition.taskDefinitionArn
          echo "TASK_DEFINITION_ARN=$revision" | Out-File -FilePath $env:GITHUB_ENV -Append

      # Update ECS service
      - name: Update ECS service
        run: |
          aws ecs update-service `
            --cluster $env:ECS_CLUSTER `
            --service $env:ECS_SERVICE `
            --task-definition $env:TASK_DEFINITION_ARN `
            --force-new-deployment
